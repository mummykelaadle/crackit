import { Julep } from "@julep/sdk";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { Problem, problems } from "../data/problems";

dotenv.config();

// Initialize Julep client
const client = new Julep({ apiKey: process.env.JULEP_API_KEY });

// Hardcoded Agent and Task IDs - these will be set after running setupInterviewExpAnalyzer.ts
// You should replace these values with the actual IDs generated by the setup script
const ANALYZER_AGENT_ID = "agent_2KgD9lmnY8zRo96VG4CjNF6o";
const ANALYZER_TASK_ID = "task_2d6U1KoQlgMUeAJ9qE7bMpWl";

/**
 * Interface for the interview experience analysis result
 */
export interface InterviewExpAnalysisResult {
  problemId: string;
  problem: Problem;
  behavioralQuestions: string[];
  reasoning?: string;
  success: boolean;
  error?: string;
}

/**
 * Interface for the structured tool call response from the agent
 */
interface ToolCallArguments {
  problemId: string;
  reasoning: string;
  behavioralQuestions: string[];
}

/**
 * Reads the agent and task IDs from the configuration file
 * Falls back to hardcoded values if the file doesn't exist
 */
function getAnalyzerIds(): { agentId: string, taskId: string } {
  try {
    const configPath = path.join(__dirname, "../config/interviewAgentInfo.json");
    if (fs.existsSync(configPath)) {
      const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
      return {
        agentId: config.analyzerAgentId || ANALYZER_AGENT_ID,
        taskId: config.analyzerTaskId || ANALYZER_TASK_ID
      };
    }
  } catch (error) {
    console.error("Error reading agent info:", error);
  }
  
  // Fallback to hardcoded values
  return { agentId: ANALYZER_AGENT_ID, taskId: ANALYZER_TASK_ID };
}

/**
 * Analyzes an interview experience article to select a relevant coding problem
 * and extract behavioral questions mentioned in the article.
 * The LLM will select the most appropriate problem based on the article content.
 * 
 * @param interviewExperienceArticle The full text of an interview experience article (e.g. from GeeksForGeeks)
 * @param jsonResponse Whether to format the execution with JSON response format
 * @returns Analysis result containing the selected problem and behavioral questions
 */
export async function analyzeInterviewExp(
  interviewExperienceArticle: string,
  jsonResponse: boolean = false
): Promise<InterviewExpAnalysisResult> {
  try {
    // Get the IDs (either from config file or hardcoded)
    const { taskId } = getAnalyzerIds();
    
    // Format the problems for the agent
    const problemsData = problems.map(p => ({
      id: p._id,
      title: p.title,
      difficulty: p.difficulty,
      tags: p.tags,
      description: p.description
    }));
    
    // Provide the problems list without any difficulty filtering
    const problemsInfo = JSON.stringify(problemsData);

    // Set up execution options
    const executionOptions: any = {
      input: {
        problems: problemsInfo,
        article: interviewExperienceArticle
      }
    };

    // Add response_format option if JSON response is requested
    if (jsonResponse) {
      executionOptions.response_format = { type: "json_object" };
    }

    // Create execution with the task
    let execution;
    try {
      execution = await client.executions.create(taskId, executionOptions);
    } catch (createError: any) {
      // Handle 422 error responses 
      if (createError.status === 422) {
        console.error("Validation error creating execution:", createError.response?.data?.detail || createError.message);
        throw new Error(`Execution creation failed: ${createError.response?.data?.detail?.[0]?.msg || "Validation error"}`);
      }
      throw createError;
    }

    // Wait for the execution to complete
    let result;
    let attempts = 0;
    const maxAttempts = 30; // Maximum 30 seconds wait time
    
    do {
      try {
        result = await client.executions.get(execution.id);
        console.log(JSON.stringify(result, null, 2));
        
        // Handle successful responses (201)
        if (result.status === "succeeded") {
          // Extract tool calls from the choices array according to the response format
          const toolCalls = (result.output as { tool_calls?: any[] })?.tool_calls || [];
          
          if (toolCalls.length > 0) {
            // Find the analyze_interview tool call
            const toolCall = toolCalls.find(call => 
              call.function?.name === "analyze_interview"
            );
            
            if (toolCall && toolCall.function) {
              try {
                // Parse the tool call arguments
                const args: ToolCallArguments = JSON.parse(toolCall.function.arguments);
                
                // Validate the response has the required fields
                if (!args.problemId) {
                  throw new Error("Missing problemId in agent response");
                }
                
                // Find the problem by ID
                const problem = problems.find(p => p._id === args.problemId);
                
                if (!problem) {
                  // If problem not found, default to Two Sum
                  const defaultProblemId = "6802cff382aab64098bd479c";
                  return {
                    problemId: defaultProblemId,
                    problem: problems.find(p => p._id === defaultProblemId)!,
                    behavioralQuestions: args.behavioralQuestions || [
                      "Tell me about yourself?",
                      "Why do you want to work at our company?",
                      "Describe a challenging situation you faced and how you handled it?"
                    ],
                    reasoning: "Default problem selected as the specified problem ID was not found.",
                    success: true
                  };
                }
                
                // Return the successful result with all data
                return {
                  problemId: args.problemId,
                  problem,
                  behavioralQuestions: args.behavioralQuestions || [],
                  reasoning: args.reasoning,
                  success: true
                };
              } catch (parseError) {
                console.error("Error parsing tool call arguments:", parseError);
                console.error("Raw tool call:", toolCall);
              }
            }
          }
          
          console.error("No valid tool call found in agent response");
          console.error("Raw output:", result);
          
          // Fall back to default selection
          const defaultProblemId = "6802cff382aab64098bd479c"; // Two Sum
          return {
            problemId: defaultProblemId,
            problem: problems.find(p => p._id === defaultProblemId)!,
            behavioralQuestions: [
              "Tell me about yourself?",
              "Why do you want to work at our company?",
              "Describe a challenging situation you faced and how you handled it?"
            ],
            success: true,
            error: "No valid tool call found in agent response"
          };
        } else if (result.status === "failed") {
          throw new Error(`Execution failed: ${result.error || "Unknown error"}`);
        }
      } catch (fetchError: any) {
        // Handle errors when fetching execution results
        if (fetchError.status === 422) {
          console.error("Validation error getting execution:", fetchError.response?.data?.detail || fetchError.message);
          throw new Error(`Execution fetch failed: ${fetchError.response?.data?.detail?.[0]?.msg || "Validation error"}`);
        }
        
        // For other errors, just log and keep trying
        console.error("Error fetching execution result:", fetchError);
      }
      
      await new Promise((res) => setTimeout(res, 1000));
      attempts++;
    } while ((!result || !["succeeded", "failed"].includes(result.status)) && attempts < maxAttempts);

    if (attempts >= maxAttempts) {
      throw new Error("Execution timed out");
    }

    throw new Error("Execution failed with unknown error");
  } catch (error) {
    console.error("Error in interview experience analysis:", error);
    
    // Fallback to default selection in case of any error
    return {
      problemId: "6802cff382aab64098bd479c", // Two Sum problem
      problem: problems.find(p => p._id === "6802cff382aab64098bd479c")!,
      behavioralQuestions: [
        "Tell me about yourself?",
        "Why do you want to work at our company?",
        "Describe a challenging situation you faced and how you handled it?"
      ],
      success: false,
      error: error instanceof Error ? error.message : "Unknown error"
    };
  }
}